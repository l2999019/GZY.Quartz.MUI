@page "/QuartzUI"

@model GZY.Quartz.MUI.Areas.MyFeature.Pages.MainModel
@{
    Layout = "_JavasCriptLayout";
}
<style>
   
    .card {
        flex: 1;
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        padding: 20px;
        text-align: center;
    }

        .card h2 {
            margin: 0;
            font-size: 28px;
            color: #333;
        }

        .card p {
            margin: 5px 0 0;
            color: #666;
            font-size: 14px;
        }
    .chart {
        height: 350px;
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        padding: 10px;
    }

</style>
<div id="main">
    <el-container>
        <el-header style="padding: 0;">
            <!-- 头部样式 -->
            <el-menu :default-active="activeIndex" mode="horizontal" background-color="#fcfcfc">
                <el-menu-item index="1" @@click="onTabClick(1)"><i class="el-icon-menu"></i><span>任务调度</span></el-menu-item>
                <el-menu-item index="2" @@click="onTabClick(2)"><i class="el-icon-pie-chart"></i><span>任务仪表盘</span></el-menu-item>
            </el-menu>
        </el-header>
        <el-main style="padding: 20px 0px 0px 0px;">
            <el-card v-show="cur==1">
                <el-row type="flex" align="middle">
                    <el-col :span="8">
                        <h4>后台任务列表</h4>
                    </el-col>
                    <el-col :span="16" style="text-align: right;">
                        <el-input style="width:300px" size="mini" placeholder="请输入任务名/分组名" v-model="taskOrGroupName"></el-input>
                        <el-button round type="primary" size="mini" icon="el-icon-search" @@click="OnLoadJobs">搜索</el-button>
                        <el-button type="primary" size="mini" icon="el-icon-plus" @@click="handleXJRW">新建任务</el-button>
                        <el-button type="success" size="mini" icon="el-icon-video-pause" @@click="handleZTRW">暂停任务</el-button>
                        <el-button type="warning" size="mini" icon="el-icon-open" @@click="handleKQRW">开启任务</el-button>
                        <el-button type="danger" size="mini" icon="el-icon-video-play" @@click="handleLJZX">立即执行</el-button>
                        <el-button type="info" size="mini" icon="el-icon-edit" @@click="handleXGRW">修改任务</el-button>
                        <el-button type="danger" size="mini" icon="el-icon-delete-solid" @@click="OnDeleteJobs">删除任务</el-button>
                        <el-button type="default" size="mini" icon="el-icon-refresh" @@click="OnLoadJobs">刷新数据</el-button>
                    </el-col>
                </el-row>
                <el-row type="flex" align="middle">
                    <el-col :span="24" style="padding: 10px 0 0 0;">
                        <el-table ref="tb" :data="tableData" border stripe style="width: 100%;" :height="tableheight" highlight-current-row
                                  :default-sort="{prop: 'GroupName', order: 'ascending'}" :header-cell-style="{backgroundColor:'#F5F7FA',color:'#000000'}" @@current-change="handleSelect">
                            <el-table-column type="index" width="50" label="序号" align="center">
                            </el-table-column>
                            <el-table-column prop="TaskName" label="任务" width="180" align="center">
                            </el-table-column>
                            <el-table-column prop="GroupName" label="分组" width="180" align="center" sortable>
                            </el-table-column>
                            <el-table-column prop="Interval" label="间隔时间" align="center">
                            </el-table-column>
                            <el-table-column prop="ApiUrl" label="ApiUrl" align="center">
                            </el-table-column>
                            <el-table-column prop="Status" width="120" label="运行状态" align="center" sortable>
                                <template slot-scope="scope">
                                    <el-tag type="info" disable-transitions v-if="scope.row.Status==4">
                                        {{scope.row.Status|formatStatues}}
                                    </el-tag>
                                    <el-tag type="danger" disable-transitions v-if="scope.row.Status==5">
                                        {{scope.row.Status|formatStatues}}
                                    </el-tag>
                                    <el-tag type="success" disable-transitions v-if="scope.row.Status==6">
                                        {{scope.row.Status|formatStatues}}
                                    </el-tag>
                                    <el-tag type="primary" disable-transitions v-if="scope.row.Status==7">
                                        {{scope.row.Status|formatStatues}}
                                    </el-tag>
                                </template>
                            </el-table-column>
                            <el-table-column prop="LastRunTime" label="最近一次运行时间" align="center">
                            </el-table-column>
                            <el-table-column prop="Describe" label="任务描述" :show-overflow-tooltip="true" align="center">
                            </el-table-column>
                            <el-table-column prop="TaskType" label="任务类型" width="120" align="center">
                                <template slot-scope="scope">
                                    {{scope.row.TaskType==1?'DLL':'API'}}
                                </template>
                            </el-table-column>
                            <el-table-column label="操作" align="center">
                                <template slot-scope="scope">
                                    <el-button size="mini" type="default" @@click="handleCZ(scope.$index, scope.row)">执行记录</el-button>
                                </template>
                            </el-table-column>
                        </el-table>
                    </el-col>
                </el-row>
           </el-card>
            <el-card v-show="cur==2" >
                <el-row :gutter="20">
                    <el-col :span="6">
                       <el-card class="card">
                            <h2>{{dashboardData.JobCounts}}</h2><p>今日执行总次数</p>
                       </el-card>
                    </el-col>
                    <el-col :span="6">
                        <el-card class="card">
                            <h2 style="color:red">{{dashboardData.ErrorCounts.toFixed(2)}}%</h2><p>失败率</p>
                        </el-card>
                    </el-col>
                    <el-col :span="6">
                        <el-card class="card">
                            <h2>{{dashboardData.AverageTime.toFixed(2)}}ms</h2><p>平均耗时</p>
                        </el-card>
                    </el-col>
                    <el-col :span="6">
                        <el-card class="card">
                            <h2>{{dashboardData.RunJobs}}</h2><p>运行任务数/总任务数</p>
                        </el-card>
                    </el-col>
                </el-row>
                <el-row :gutter="20" style="margin-top:20px" >
                    <el-col :span="12">
                       <el-card>
                           <div id="execTrend" class="chart"></div>
                       </el-card>
                    </el-col>
                     <el-col :span="12">
                       <el-card>
                           <div id="failureRate" class="chart"></div>
                       </el-card>
                    </el-col>
                </el-row>
                <el-row :gutter="20" style="margin-top:20px">
                    <el-col :span="12">
                        <el-card>
                            <div id="errorTop10" class="chart"></div>
                        </el-card>
                    </el-col>
                    <el-col :span="12">
                        <el-card>
                            <div id="durationDist" class="chart"></div>
                        </el-card>
                    </el-col>
                </el-row>
            </el-card>
        </el-main>
    </el-container>
    <el-dialog :title="title" :visible.sync="dialogFormVisible">
        <el-row type="flex" justify="center">
            <el-col :span="23">
                <el-form :model="ruleForm" ref="ruleForm" label-width="10em" class="demo-ruleForm">
                    <el-form-item label="任务"
                                  prop="TaskName"
                                  :rules="rules.TaskName">
                        <el-input v-model="ruleForm.TaskName" placeholder="请输入任务名称"></el-input>
                    </el-form-item>
                    <el-form-item label="分组"
                                  prop="GroupName"
                                  :rules="rules.GroupName">
                        <el-input v-model="ruleForm.GroupName" placeholder="请输入分组名称"></el-input>
                    </el-form-item>
                    
                    <el-form-item label="间隔时间"
                                  prop="Interval"
                                  :rules="rules.Interval">

                        <el-input v-model="ruleForm.Interval"></el-input>
                        <p style="font-size:12px;color:red">间隔时间请输入Cron表达式<a target="_blank" href="https://qqe2.com/cron">在线生成</a></p>
                    </el-form-item>
                    <el-form-item label="任务类型"
                                  prop="TaskType"
                                  :rules="rules.TaskType">
                        <el-select v-model="ruleForm.TaskType" placeholder="请选择任务类型" @@change="taskTypeChange">
                            <el-option label="DLL" :value="1"></el-option>
                            <el-option label="API" :value="2"></el-option>
                        </el-select>
                    </el-form-item>
                    <el-form-item label="ApiUrl"
                                  prop="ApiUrl"
                                  :rules="rules.ApiUrl"
                                  v-if="ruleForm.TaskType==2">
                        <el-input v-model="ruleForm.ApiUrl" placeholder="请输入API地址"></el-input>
                    </el-form-item>
                    <el-form-item label="API访问类型"
                                  prop="ApiRequestType"
                                  :rules="rules.ApiRequestType"
                                  v-if="ruleForm.TaskType==2">
                        <el-select v-model="ruleForm.ApiRequestType" placeholder="请选择请求方式">
                            <el-option label="GET" value="GET"></el-option>
                            <el-option label="POST" value="POST"></el-option>
                        </el-select>
                    </el-form-item>
                    <el-form-item label="授权名"
                                  prop="ApiAuthKey"
                                  :rules="rules.ApiAuthKey"
                                  v-if="ruleForm.TaskType==2">
                        <el-input v-model="ruleForm.ApiAuthKey" placeholder="请输入API授权名"></el-input>
                    </el-form-item>
                    <el-form-item label="授权值"
                                  prop="ApiAuthValue"
                                  :rules="rules.ApiAuthValue"
                                  v-if="ruleForm.TaskType==2">
                        <el-input v-model="ruleForm.ApiAuthValue" placeholder="请输入API授权值"></el-input>
                    </el-form-item>
                    <el-form-item label="API超时时间"
                                  prop="ApiTimeOut"
                                  v-if="ruleForm.TaskType==2">
                        <el-input v-model="ruleForm.ApiTimeOut" placeholder="请输入API超时时间(单位:秒),默认100秒" type="number"></el-input>
                    </el-form-item>
                    <el-form-item label="参数(API和DLL通用)"
                                  prop="ApiParameter"
                                  :rules="rules.ApiParameter">
                        <el-input v-model="ruleForm.ApiParameter" placeholder="请输入调用参数"></el-input>
                    </el-form-item>
                    <el-form-item label="DLL类型名"
                                  prop="DllClassName"
                                  :rules="rules.DllClassName"
                                  v-if="ruleForm.TaskType==1">
                        <el-select filterable v-model="ruleForm.DllClassName" placeholder="请选择DLL类型名">
                            <el-option label="无" value=""></el-option>
                            <el-option v-for="pclass in classjobs" :label="pclass" :value="pclass"></el-option>
                        </el-select>
                       @* <el-input v-model="ruleForm.DllClassName" placeholder="请输入DLL类型名"></el-input>*@
                    </el-form-item>
                    @*<el-form-item label="Dll方法名"
                      prop="DllActionName"
                      :rules="rules.DllActionName"
                      v-if="ruleForm.TaskType==1">
            <el-input v-model="ruleForm.DllActionName" placeholder="请输入DLL方法名"></el-input>
        </el-form-item>*@
                    <el-form-item label="任务描述" prop="Describe">
                        <el-input type="textarea" :rows="5" v-model="ruleForm.Describe"></el-input>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="primary" @@click="submitForm('ruleForm')">{{btnText}}</el-button>
                        <el-button @@click="resetForm('ruleForm')">重置</el-button>
                    </el-form-item>
                </el-form>
            </el-col>
        </el-row>
    </el-dialog>
    <el-dialog title="执行记录" :visible.sync="dialogRecordVisible">
        <el-row type="flex" align="middle">
            <el-col :span="24" style="padding: 10px 0 0 0;">
                <el-table ref="tb_record" :data="recordData" border stripe style="width: 100%;" highlight-current-row
                          :header-cell-style="{backgroundColor:'#F5F7FA',color:'#000000'}">
                    <el-table-column type="index" width="50" label="序号" align="center">
                    </el-table-column>
                    <el-table-column prop="BeginDate" label="开始时间" width="180" align="center">
                    </el-table-column>
                    <el-table-column prop="EndDate" label="结束时间" width="180" align="center">
                    </el-table-column>
                    <el-table-column prop="Msg" label="消息" align="center">
                        <template slot-scope="scope">
                            <el-tooltip placement="top">
                                <div v-html="scope.row.Msg" slot="content"></div>
                                <div style="overflow:hidden;white-space:nowrap;text-overflow:ellipsis">{{scope.row.Msg}}</div>
                             </el-tooltip>
                        </template>
                    </el-table-column>
                </el-table>
            </el-col>
        </el-row>
        <el-row type="flex" align="middle">
            <el-col :span="24" style="text-align: right;">
                <el-pagination @@size-change="handleSizeChange"
                               @@current-change="handleCurrentChange"
                               :current-page="currentPage"
                               :page-sizes="pageSizes"
                               :page-size="pageSize"
                               layout="total, sizes, prev, pager, next, jumper"
                               :total="total"
                               hide-on-single-page>
                </el-pagination>
            </el-col>
        </el-row>
    </el-dialog>
</div>
@section Scripts{
    <script>
        new Vue({
            el: "#main",
            data() {
                return {
                    cur:1,
                    activeIndex: '1',
                    tableheight: 200,
                    tableData:[],
                    dialogFormVisible: false,
                    dialogRecordVisible: false,
                    ruleForm: this.initTaskEntity(),
                    taskOrGroupName:null,
                    rules: {
                        TaskName: [
                            { required: true, message: '请输入任务名称', trigger: 'blur' }
                        ],
                        GroupName: [
                            { required: true, message: '请输入分组名称', trigger: 'blur' }
                        ],
                        Interval: [
                            { required: true, message: '请输入任务时间间隔', trigger: 'blur' }
                        ],
                        ApiUrl: [
                            { required: true, message: '请输入调用的API地址', trigger: 'blur' }
                        ],
                        Describe: [
                            { required: true, message: '请输入任务描述', trigger: 'blur' }
                        ],
                        TaskType: [
                            { required: true, message: '请选择任务类型', trigger: 'change' }
                        ],
                        ApiRequestType: [
                            { required: true, message: '请选择API访问类型', trigger: 'change' }
                        ],
                        //ApiAuthKey: [
                        //    { required: true, message: '请输入Api授权名', trigger: 'blur' }
                        //],
                        //ApiAuthValue: [
                        //    { required: true, message: '请输入Api授权值', trigger: 'blur' }
                        //],
                        //ApiParameter: [
                        //    { required: true, message: '请输入API参数', trigger: 'blur' }
                        //],
                        DllClassName: [
                            { required: true, message: '请输入类名', trigger: 'blur' }
                        ]
                        //DllActionName: [
                        //    { required: true, message: '请输入方法名', trigger: 'blur' }
                        //]
                    },
                    currentPage: 1,
                    total: 0,
                    pageSize: 20,
                    pageSizes: [20, 30, 40, 50],
                    selectrow: "",
                    title: '新建任务',
                    isedit: false,
                    btnText: '立即创建',
                    recordData:[],
                    classjobs:[],
                    dashboardData:{JobCounts:0,ErrorCounts:0,AverageTime:0,RunJobs:""},
                    execTrend:null,
                    failureRate:null
                }
            },
            mounted: function () {
                this.$nextTick(function () {
                    this.tableheight = window.innerHeight - 190;
                });
               
                this.OnLoadJobs();
                this.onLoadClassJobs();
               // this.execTrend = echarts.init(document.getElementById("execTrend"));
                //this.failureRate = echarts.init(document.getElementById("failureRate"));
               //this.cur =1;
            },
            methods: {
                FormatProgress(percentage) {
                    return '100';
                },
                OnLoadJobs() {
                     const params = {
                        taskOrGroupName: this.taskOrGroupName
                     };
                    var that = this;
                    axios.get("?handler=SelectJob", { params }).then(function (res) {
                        that.tableData = res.data;
                    });
                },
                onLoadClassJobs(){
                    var that = this;
                    axios("?handler=SelectClassJob").then(function (res) {
                        that.classjobs = res.data;
                    });
                },
                onLoadEcharts() {
                    var that = this;
                    axios("?handler=DashboardInfo").then(function (res) {
                        that.dashboardData = res.data;
                    });

                    axios("?handler=TrendInfo").then(function (res) {
                      const data = res.data;

                      // 生成 0-23 小时完整刻度
                        const hours = Array.from({ length: 24 }, (_, i) => i);
                        const successCounts = hours.map(h => {
                          const item = data.find(d => d.Hour === h);
                          return item ? item.SuccessCount : 0;
                        });
                        const failCounts = hours.map(h => {
                          const item = data.find(d => d.Hour === h);
                          return item ? item.FailCount : 0;
                        });
                        const avgDurations = hours.map(h => {
                          const item = data.find(d => d.Hour === h);
                          return item ? Number(item.AvgDuration.toFixed(2)) : 0;
                        });

                      const option = {
                          title: { text: '当天任务执行趋势 (按小时)', left: 'center' },
                          tooltip: { trigger: "axis" },
                          legend: { data: ["成功次数", "失败次数", "平均耗时(ms)"] },
                          xAxis: { type: "category", data: hours.map(h => h + "点") },
                          yAxis: [
                            { type: "value", name: "次数" },
                            { type: "value", name: "耗时(ms)" }
                          ],
                          series: [
                            {
                              name: "成功次数",
                              type: "bar",
                              data: successCounts,
                              itemStyle: { color: "#4caf50" }
                            },
                            {
                              name: "失败次数",
                              type: "bar",
                              data: failCounts,
                              itemStyle: { color: "#f44336" }
                            },
                            {
                              name: "平均耗时(ms)",
                              type: "line",
                              yAxisIndex: 1,
                              data: avgDurations,
                              smooth: true,
                              itemStyle: { color: "#2196f3" }
                            }
                          ]
                        };
                        var execTrend = echarts.init(document.getElementById('execTrend'));
                        execTrend.setOption(option);
                    });
                    axios("?handler=FailureRateInfo").then(function (res) {
                        const data = res.data;
                        const taskNames = data.map(d => d.TaskName);
                        const rates = data.map(d => d.FailRate);
                        const option = {
                          title: { text: '最近任务执行情况', left: 'center' },
                          tooltip: {
                            trigger: "axis",
                            formatter: (params) => {
                              const item = params[0];
                              return `${item.axisValue}<br/>失败率: ${item.data}%`;
                            }
                          },
                          xAxis: {
                            type: "category",
                            data: taskNames,
                                axisLabel: { rotate: 60,
                                             formatter: function (value) {
                                                return value.length > 10 ? value.slice(0, 10) + "…" : value;
                                            } 
                                } // 任务名长时旋转避免重叠
                          },
                          tooltip: {
                            trigger: "axis",
                            formatter: function(params) {
                              let taskName = params[0].axisValue; // 完整任务名
                              let failRate = params[0].data;
                              return `${taskName}<br/>失败率: ${failRate}%`;
                            }
                          },
                          yAxis: {
                            type: "value",
                            name: "失败率(%)",
                            min: 0,
                            max: 100
                          },
                          series: [
                            {
                              name: "失败率",
                              type: "bar",
                              data: rates,
                              itemStyle: { color: "#f44336" }
                            }
                          ]
                        };
                       var failureRate = echarts.init(document.getElementById('failureRate'));
                       failureRate.setOption(option);
                      });
                    axios("?handler=ErrorTop10").then(function (res) {
                        const data = res.data || [];
                        const taskNames = data.map(x => x.TaskName);
                        const errorCounts = data.map(x => x.ErrorCount);
                        const option ={
                          title: { text: "异常任务 Top10", left: "center" },
                          tooltip: { trigger: "axis" },
                          xAxis: { type: "value" },
                          yAxis: {
                            type: "category",
                            data: taskNames,
                            inverse: true,
                            axisLabel: { interval: 0, formatter: val => val.length > 10 ? val.substring(0,10) + "..." : val }
                          },
                          series: [{
                            type: "bar",
                            data: errorCounts,
                            itemStyle: { color: "#e74c3c" }
                          }]
                        };
                       var errorTop10 = echarts.init(document.getElementById('errorTop10'));
                       errorTop10.setOption(option);
                      });
                    axios("?handler=DurationDistribution").then(function (res) {
                        const data = res.data || {};
                        const categories = ["<100ms", "100-500ms", "500-1000ms", ">1000ms"];
                        const values = [data.Fast, data.Normal, data.Slow, data.VerySlow];
                        const option ={
                                          title: { text: "任务耗时分布", left: "center" },
                                          tooltip: { trigger: "axis" },
                                          xAxis: { type: "category", data: categories },
                                          yAxis: { type: "value" },
                                          series: [{
                                            type: "bar",
                                            data: values,
                                            itemStyle: { color: "#3498db" }
                                          }]
                                        }
                       var durationDist = echarts.init(document.getElementById('durationDist'));
                       durationDist.setOption(option);
                      });
                },
                onTabClick(curvalue){
                    this.cur=curvalue;
                    if(this.cur==2)
                    {
                        this.$nextTick(()=>{

                        this.onLoadEcharts();
                        })
                        
                    }
                },
                handleXJRW() {
                    this.title = "新建任务";
                    this.btnText = "立即创建";
                    this.isedit = false;
                    this.ruleForm = this.initTaskEntity();
                    this.dialogFormVisible = true;
                },
                OnDeleteJobs() {
                    var that = this;
                    ELEMENT.MessageBox.confirm('此操作将永久删除该任务, 是否继续?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        axios.post("?handler=DeleteJob", null,
                            {
                                params: that.selectrow
                            }).then(function (res) {
                                if (res.data.status) {

                                    that.OnLoadJobs();
                                }
                                ELEMENT.MessageBox.alert(res.data.message, "系统提示");
                            });
                        
                    }).catch(() => { });
                },
                handleSelect(val) {
                    this.selectrow = val;
                },
                resetForm(name) {
                    var that = this;
                    this.$refs[name].resetFields();
                    if (this.isedit) {
                        this.ruleForm = this.initTaskEntity();
                        this.ruleForm.id = this.selectrow.id;
                        this.ruleForm.timeflag = this.selectrow.timeflag;
                        this.ruleForm.changetime = this.selectrow.changetime;
                    }
                },
                handleSizeChange(size) {
                    this.currentPage = 1;
                    this.pageSize = size;
                    this.getRecord();
                },
                handleCurrentChange(page) {
                    this.currentPage = page;
                    this.getRecord();
                },
                handleCZ(index, row) {
                    this.currentPage = 1;
                    this.pageSize = 20;
                    this.selectrow = row;
                    this.getRecord(() => {
                        this.dialogRecordVisible = true;
                    });
                },
                getRecord(callback) {
                    axios.post("?handler=JobRecord", null, {
                        params: {
                            taskName: this.selectrow.TaskName,
                            groupName: this.selectrow.GroupName,
                            current: this.currentPage,
                            size: this.pageSize
                        }
                    }).then(res => {
                        this.total = res.data.total;
                        this.recordData = res.data.data;
                        if (callback) {
                            callback();
                        }
                    });
                },
                handleZTRW() {
                    if (!this.selectrow) {
                        this.$message({
                            message: '请选择作业',
                            type: 'warning'
                        });
                        return false;
                    }
                    ELEMENT.MessageBox.confirm('确定暂停选中任务吗?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        axios.post("?handler=PauseJob", null,
                            {
                                params: this.selectrow
                            }).then( res=> {
                                if (res.data.status) {

                                    this.OnLoadJobs();
                                }
                                ELEMENT.MessageBox.alert(res.data.message, "系统提示");
                            });
                    }).catch(() => { });
                },
                handleKQRW() {
                    if (!this.selectrow) {
                        this.$message({
                            message: '请选择作业',
                            type: 'warning'
                        });
                        return false;
                    }
                    ELEMENT.MessageBox.confirm('确定开启选中任务吗?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        axios.post("?handler=StartJob", null,
                            {
                                params: this.selectrow
                            }).then(res => {
                                if (res.data.status) {
                                    this.OnLoadJobs();
                                }
                                ELEMENT.MessageBox.alert(res.data.message, "系统提示");
                            });
                    }).catch(() => { });
                },
                handleLJZX() {
                    if (!this.selectrow) {
                        this.$message({
                            message: '请选择作业',
                            type: 'warning'
                        });
                        return false;
                    }
                    ELEMENT.MessageBox.confirm('确定立即执行选中任务吗?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        axios.post("?handler=RunJob", null,
                            {
                                params: this.selectrow
                            }).then(res => {
                                if (res.data.status) {
                                    this.OnLoadJobs();
                                }
                                ELEMENT.MessageBox.alert(res.data.message, "系统提示");
                            });
                    }).catch(() => { });
                },
                handleXGRW() {
                    if (!this.selectrow) {
                        this.$message({
                            message: '请选择作业',
                            type: 'warning'
                        });
                        return false;
                    }
                    this.isedit = true;
                    this.title = "修改任务";
                    this.btnText = "立即修改";
                    this.dialogFormVisible = true;
                    this.ruleForm = Object.assign({}, this.selectrow);
                },
                submitForm(name) {
                    var that = this;
                    this.$refs[name].validate((valid) => {
                        if (valid) {
                            let url = "";
                            if (this.isedit) {
                                url = "?handler=UpdateJob";
                            } else {
                                url = "?handler=AddJob";
                            }
                            axios.post(url, null,
                                {
                                    params: that.ruleForm
                                }
                            ).then(function (res) {
                                if (res.data.status) {
                                    ELEMENT.MessageBox.alert(res.data.message, "系统信息", {
                                        type: 'success', callback: () => {
                                            that.OnLoadJobs();
                                            that.resetForm('ruleForm');
                                            that.dialogFormVisible = false;
                                        }
                                    });

                                } else {
                                    ELEMENT.MessageBox.alert(res.data.message, "系统信息", {
                                        type: 'info', callback: () => {
                                            //that.OnLoadJobs();
                                            //that.resetForm('ruleForm');
                                            //that.dialogFormVisible = false;
                                        }
                                    });
                                }
                            });
                        }
                    });
                },
                taskTypeChange(val) {
                    this.$refs["ruleForm"].clearValidate();
                },
                initTaskEntity() {
                    return {
                        TaskName: '',
                        GroupName: '',
                        Interval: '',
                        ApiUrl: '',
                        Describe: '',
                        LastRunTime: '',
                        Status: '',
                        TaskType: '',
                        ApiRequestType: '',
                        ApiAuthKey: '',
                        ApiAuthValue: '',
                        ApiParameter: '',
                        ApiTimeOut:null,
                        DllClassName: '',
                        DllActionName: '',
                        changetime: '',
                        id: 0,
                        timeflag:''
                    }
                }
            },
            filters: {
                formatStatues(val) {
                    switch (val) {
                        case 1:
                            return '新增';
                        case 2:
                            return '删除';
                        case 3:
                            return '修改';
                        case 4:
                            return '暂停';
                        case 5:
                            return '停止';
                        case 6:
                            return '开启';
                        case 7:
                            return '立即执行';
                        default:
                            return "";
                    }
                }
            }
        });
    </script>
}